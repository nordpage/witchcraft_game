extends RigidBody3D

@export var max_speed: float = 30.0
@export var acceleration: float = 200.0
@export var steering_speed: float = 1.5
@export var suspension_strength: float = 200.0
@export var damping: float = 0.9

@onready var wheel_fl: RigidBody3D = $Suspension_FL/WheelFrontLeft
@onready var wheel_fr: RigidBody3D = $Suspension_FR/WheelFrontRight
@onready var wheel_bl: RigidBody3D = $Suspension_BL/WheelBackLeft
@onready var wheel_br: RigidBody3D = $Suspension_BR/WheelBackRight
@onready var terrain = $HTerrain # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ HTerrain


var speed_input: float = 0.0
var steering_input: float = 0.0

func _ready() -> void:
	lock_wheel_axes()
	for wheel in [wheel_fl, wheel_fr, wheel_bl, wheel_br]:
		wheel.set_collision_mask_value(3, false)  # –ö–æ–ª—ë—Å–∞ –Ω–µ —Å—Ç–∞–ª–∫–∏–≤–∞—é—Ç—Å—è —Å —Ç–µ–ª–µ–∂–∫–æ–π

	if terrain:
		terrain.regenerate_collision()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏

func _physics_process(delta):
	apply_suspension()
	handle_steering()
	apply_motor_force()
	align_to_terrain()
	prevent_rollover()
	for wheel in [wheel_fl, wheel_fr, wheel_bl, wheel_br]:
		print("–í—ã—Å–æ—Ç–∞ –∫–æ–ª–µ—Å–∞:", wheel.global_transform.origin.y)



func align_to_terrain():
	if not terrain:
		return

	var ray_start = global_transform.origin + Vector3(0, 2, 0)  # –õ—É—á —Å–≤–µ—Ä—Ö—É
	var ray_end = global_transform.origin + Vector3(0, -5, 0)  # –õ—É—á –≤–Ω–∏–∑

	var ray_query = PhysicsRayQueryParameters3D.create(ray_start, ray_end)
	var result = get_world_3d().direct_space_state.intersect_ray(ray_query)

	if result:
		var normal = result["normal"]

		# –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π Basis —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –Ω–∞–∫–ª–æ–Ω–æ–º
		var forward = -global_transform.basis.z  # –¢–µ–∫—É—â–∏–π –≤–µ–∫—Ç–æ—Ä –≤–ø–µ—Ä—ë–¥
		var new_basis = Basis().looking_at(forward, normal)  # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –Ω–æ—Ä–º–∞–ª–∏

		# –ü–ª–∞–≤–Ω–æ –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º (—á—Ç–æ–±—ã –Ω–µ –¥—ë—Ä–≥–∞–ª–æ—Å—å)
		global_transform.basis = global_transform.basis.slerp(new_basis, 0.1)

func prevent_rollover():
	var up = global_transform.basis.y  # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
	var angle = up.angle_to(Vector3.UP)  # –£–≥–æ–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è

	if angle > deg_to_rad(20):  # –ï—Å–ª–∏ –∑–∞–≤–∞–ª —Ç–µ–ª–µ–∂–∫–∏ –±–æ–ª—å—à–µ 20 –≥—Ä–∞–¥—É—Å–æ–≤
		var correction_force = up.cross(Vector3.UP) * mass * 10.0
		apply_torque(correction_force)  # –°—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–ª–µ–∂–∫—É


# üìå –ü–æ–¥–≤–µ—Å–∫–∞ (–º—è–≥–∫–æ—Å—Ç—å)
func apply_suspension():
	for wheel in [wheel_fl, wheel_fr, wheel_bl, wheel_br]:
		var ray_start = wheel.global_transform.origin + Vector3(0, 1, 0)
		var ray_end = wheel.global_transform.origin + Vector3(0, -1, 0)

		var ray_query = PhysicsRayQueryParameters3D.create(ray_start, ray_end)
		var result = get_world_3d().direct_space_state.intersect_ray(ray_query)

		if result:
			var compression = 1.0 - result["position"].y / wheel.global_transform.origin.y
			var force = 1200.0 * compression  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∏–ª—É –ø–æ–¥–≤–µ—Å–∫–∏
			wheel.apply_central_force(Vector3(0, force, 0))

		wheel.linear_velocity *= 0.9  # –ì–∞—Å–∏–º —Ä–µ–∑–∫–∏–µ –∫–æ–ª–µ–±–∞–Ω–∏—è

func lock_wheel_axes():
	for wheel in [wheel_bl, wheel_br]:  # –ó–∞–¥–Ω–∏–µ –∫–æ–ª—ë—Å–∞ (–ø—Ä–∏–≤–æ–¥–Ω—ã–µ)
		wheel.axis_lock_angular_x = true  # –ó–∞–ø—Ä–µ—â–∞–µ–º –Ω–∞–∫–ª–æ–Ω—è—Ç—å—Å—è –≤–±–æ–∫
		wheel.axis_lock_angular_y = false  # –†–∞–∑—Ä–µ—à–∞–µ–º –∫—Ä—É—Ç–∏—Ç—å—Å—è (–¥–≤–∏–≥–∞—Ç—å—Å—è)
		wheel.axis_lock_angular_z = true  # –ó–∞–ø—Ä–µ—â–∞–µ–º –≤—Ä–∞—â–∞—Ç—å—Å—è –≤–æ–∫—Ä—É–≥ –ø—Ä–æ–¥–æ–ª—å–Ω–æ–π –æ—Å–∏

	for wheel in [wheel_fl, wheel_fr]:  # –ü–µ—Ä–µ–¥–Ω–∏–µ –∫–æ–ª—ë—Å–∞ (—Ä—É–ª–µ–≤—ã–µ)
		wheel.axis_lock_angular_x = true  # –ó–∞–ø—Ä–µ—â–∞–µ–º –Ω–∞–∫–ª–æ–Ω—è—Ç—å—Å—è –≤–±–æ–∫
		wheel.axis_lock_angular_y = false  # –†–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–≤–æ—Ä–æ—Ç —Ä—É–ª—ë–º
		wheel.axis_lock_angular_z = true  # –ó–∞–ø—Ä–µ—â–∞–µ–º –≤–∏–±—Ä–∞—Ü–∏—é –≤–ø–µ—Ä—ë–¥-–Ω–∞–∑–∞–¥



# üìå –ü–æ–≤–æ—Ä–æ—Ç –ø–µ—Ä–µ–¥–Ω–∏—Ö –∫–æ–ª—ë—Å
func handle_steering():
	var turn_force = steering_input * steering_speed
	wheel_fl.apply_torque(Vector3(0, turn_force, 0))
	wheel_fr.apply_torque(Vector3(0, turn_force, 0))

# üìå –ü—Ä–∏–≤–æ–¥ –Ω–∞ –∑–∞–¥–Ω–∏–µ –∫–æ–ª—ë—Å–∞
func apply_motor_force():
	if abs(speed_input) > 0.05:
		var force = -global_transform.basis.z * (speed_input * 1500.0)  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–ª—ã –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è
		apply_central_force(force)  # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∏–ª—É –∫–æ –≤—Å–µ–π —Ç–µ–ª–µ–∂–∫–µ


# üìå –í—Ö–æ–¥ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
func _input(event):
	if event is InputEventKey:
		if event.pressed:
			if event.keycode == KEY_W:
				speed_input = 1.0
			elif event.keycode == KEY_S:
				speed_input = -1.0
			elif event.keycode == KEY_A:
				steering_input = -1.0
			elif event.keycode == KEY_D:
				steering_input = 1.0
		else:
			if event.keycode == KEY_W or event.keycode == KEY_S:
				speed_input = 0.0
			elif event.keycode == KEY_A or event.keycode == KEY_D:
				steering_input = 0.0
